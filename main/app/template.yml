Parameters:
  S3BucketName:
    Type: String
    Default: "26459bd8-9f4e-11ef-be57-767df51fc48b"

  NetworkStackName:
    Type: String
    Default: "udagram-network"

Resources:
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Accept traffic from ALB to EC2s"
      VpcId: !ImportValue udagram-network-VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "ALB Security Group"
      VpcId: !ImportValue udagram-network-VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"

  EC2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: "t2.micro"
        ImageId: "ami-03fa85deedfcac80b"
        KeyName: "udagram-app"
        SecurityGroupIds:
          - !GetAtt EC2SecurityGroup.GroupId
        IamInstanceProfile:
          Name: !Ref EC2InstanceProfile
        UserData:
          Fn::Base64: |
            #!/bin/bash
            apt-get update -y
            sudo apt-get install nginx -y
            apt-get install unzip -y
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws --version
            aws s3 cp s3://26459bd8-9f4e-11ef-be57-767df51fc48b/index.html /var/www/html/index.html
            service nginx start

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "sts:AssumeRole"
            Principal:
              Service:
                - "ec2.amazonaws.com"
      Policies:
        - PolicyName: "EC2S3Policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: ["s3:GetObject", "s3:PutObject"]
                Resource: !Sub "arn:aws:s3:::26459bd8-9f4e-11ef-be57-767df51fc48b/*"

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: EC2InstanceRole

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !ImportValue udagram-network-PrivateSubnet1Id
        - !ImportValue udagram-network-PrivateSubnet2Id
      LaunchTemplate:
        LaunchTemplateId: !Ref EC2LaunchTemplate
        Version: !GetAtt EC2LaunchTemplate.LatestVersionNumber
      MinSize: "1"
      MaxSize: "8"
      DesiredCapacity: "1"
      TargetGroupARNs:
        - Ref: ALBTargetGroup

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !ImportValue udagram-network-PublicSubnet1Id
        - !ImportValue udagram-network-PublicSubnet2Id
      SecurityGroups:
        - Ref: ALBSecurityGroup

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref ALBListener
      Priority: 1

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !ImportValue udagram-network-VpcId
      Protocol: HTTP
      Port: 80
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      Matcher:
        HttpCode: "200"

Outputs:
  LoadBalancerDNS:
    Description: "URL of the Application Load Balancer"
    Value: !Sub "http://${ALB.DNSName}"
